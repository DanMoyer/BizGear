using System;
using System.Text;
using System.Diagnostics;
using Diagnostics.Tracing;
using Diagnostics.Tracing.Parsers;

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Diagnostics.Tracing.Parsers
{
    public sealed class AspNetTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "AspNetTrace";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0xaff081fe), unchecked((short) 0x0247), unchecked((short) 0x4275), 0x9c, 0x4e, 0x02, 0x1f, 0x3d, 0xc1, 0xda, 0x35);
        public AspNetTraceEventParser(TraceEventSource source) : base(source) {}

        public enum Keywords
        {
            None = 0,
            Infrastructure = 1,
            Module = 2,
            Page = 4,
            AppSvc = 8,
        };

        public event Action<AspNetStartTraceData> AspNetReqStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetStartTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetStopTraceData> AspNetReqEnd
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetStopTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 2, "End", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetRequestQueuedTraceData> AspNetReqRequestQueued
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetRequestQueuedTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 3, "RequestQueued", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetRequestDequeuedTraceData> AspNetReqRequestDequeued
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetRequestDequeuedTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 4, "RequestDequeued", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetGetAppDomainEnterTraceData> AspNetReqGetAppDomainEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetGetAppDomainEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 5, "GetAppDomainEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetGetAppDomainLeaveTraceData> AspNetReqGetAppDomainLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetGetAppDomainLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 6, "GetAppDomainLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetAppDomainEnterTraceData> AspNetReqAppDomainEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetAppDomainEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 7, "AppDomainEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetStartHandlerTraceData> AspNetReqStartHandler
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetStartHandlerTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 8, "StartHandler", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetEndHandlerTraceData> AspNetReqEndHandler
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetEndHandlerTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 9, "EndHandler", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPipelineModuleEnterTraceData> AspNetReqPipelineModuleEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPipelineModuleEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 10, "PipelineModuleEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPipelineModuleLeaveTraceData> AspNetReqPipelineModuleLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPipelineModuleLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 11, "PipelineModuleLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetMapHandlerEnterTraceData> AspNetReqMapHandlerEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetMapHandlerEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 12, "MapHandlerEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetMapHandlerLeaveTraceData> AspNetReqMapHandlerLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetMapHandlerLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 13, "MapHandlerLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetParseEnterTraceData> AspNetReqParseEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetParseEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 14, "ParseEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetParseLeaveTraceData> AspNetReqParseLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetParseLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 15, "ParseLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetCompileEnterTraceData> AspNetReqCompileEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetCompileEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 16, "CompileEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetCompileLeaveTraceData> AspNetReqCompileLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetCompileLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 17, "CompileLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetHttpHandlerEnterTraceData> AspNetReqHttpHandlerEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetHttpHandlerEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 18, "HttpHandlerEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetHttpHandlerLeaveTraceData> AspNetReqHttpHandlerLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetHttpHandlerLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 19, "HttpHandlerLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetSessionStatePartitionStartTraceData> AspNetReqSessionStatePartitionStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetSessionStatePartitionStartTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 20, "SessionStatePartitionStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetSessionStatePartitionEndTraceData> AspNetReqSessionStatePartitionEnd
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetSessionStatePartitionEndTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 21, "SessionStatePartitionEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPagePreInitEnterTraceData> AspNetReqPagePreInitEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPagePreInitEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 22, "PagePreInitEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPagePreInitLeaveTraceData> AspNetReqPagePreInitLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPagePreInitLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 23, "PagePreInitLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageInitEnterTraceData> AspNetReqPageInitEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageInitEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 24, "PageInitEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageInitLeaveTraceData> AspNetReqPageInitLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageInitLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 25, "PageInitLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageLoadViewstateEnterTraceData> AspNetReqPageLoadViewstateEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageLoadViewstateEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 26, "PageLoadViewstateEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageLoadViewstateLeaveTraceData> AspNetReqPageLoadViewstateLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageLoadViewstateLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 27, "PageLoadViewstateLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageLoadPostDataEnterTraceData> AspNetReqPageLoadPostDataEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageLoadPostDataEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 28, "PageLoadPostDataEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageLoadPostDataLeaveTraceData> AspNetReqPageLoadPostDataLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageLoadPostDataLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 29, "PageLoadPostDataLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageLoadEnterTraceData> AspNetReqPageLoadEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageLoadEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 30, "PageLoadEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageLoadLeaveTraceData> AspNetReqPageLoadLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageLoadLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 31, "PageLoadLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPagePostDataChangedEnterTraceData> AspNetReqPagePostDataChangedEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPagePostDataChangedEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 32, "PagePostDataChangedEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPagePostDataChangedLeaveTraceData> AspNetReqPagePostDataChangedLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPagePostDataChangedLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 33, "PagePostDataChangedLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageRaisePostbackEnterTraceData> AspNetReqPageRaisePostbackEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageRaisePostbackEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 34, "PageRaisePostbackEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageRaisePostbackLeaveTraceData> AspNetReqPageRaisePostbackLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageRaisePostbackLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 35, "PageRaisePostbackLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPagePreRenderEnterTraceData> AspNetReqPagePreRenderEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPagePreRenderEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 36, "PagePreRenderEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPagePreRenderLeaveTraceData> AspNetReqPagePreRenderLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPagePreRenderLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 37, "PagePreRenderLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageSaveViewstateEnterTraceData> AspNetReqPageSaveViewstateEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageSaveViewstateEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 38, "PageSaveViewstateEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageSaveViewstateLeaveTraceData> AspNetReqPageSaveViewstateLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageSaveViewstateLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 39, "PageSaveViewstateLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageRenderEnterTraceData> AspNetReqPageRenderEnter
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageRenderEnterTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 40, "PageRenderEnter", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageRenderLeaveTraceData> AspNetReqPageRenderLeave
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageRenderLeaveTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 41, "PageRenderLeave", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetAcquireSessionBeginTraceData> AspNetReqSessionDataBegin
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetAcquireSessionBeginTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 42, "SessionDataBegin", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetAcquireSessionEndTraceData> AspNetReqSessionDataEnd
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetAcquireSessionEndTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 43, "SessionDataEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetProfileBeginTraceData> AspNetReqProfileBegin
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetProfileBeginTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 44, "ProfileBegin", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetProfileEndTraceData> AspNetReqProfileEnd
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetProfileEndTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 45, "ProfileEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetRoleManagerIsUserInRoleTraceData> AspNetReqRoleManagerIsUserInRole
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetRoleManagerIsUserInRoleTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 46, "RoleManagerIsUserInRole", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetRoleManagerGetUserRolesTraceData> AspNetReqRoleManagerGetUserRoles
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetRoleManagerGetUserRolesTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 47, "RoleManagerGetUserRoles", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetRoleManagerBeginTraceData> AspNetReqRoleManagerBegin
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetRoleManagerBeginTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 48, "RoleManagerBegin", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetRoleManagerEndTraceData> AspNetReqRoleManagerEnd
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetRoleManagerEndTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 49, "RoleManagerEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetWebEventRaiseStartTraceData> AspNetReqWebEventRaiseStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetWebEventRaiseStartTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 50, "WebEventRaiseStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetWebEventRaiseEndTraceData> AspNetReqWebEventRaiseEnd
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetWebEventRaiseEndTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 51, "WebEventRaiseEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetWebEventDeliverStartTraceData> AspNetReqWebEventDeliverStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetWebEventDeliverStartTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 52, "WebEventDeliverStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetWebEventDeliverEndTraceData> AspNetReqWebEventDeliverEnd
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetWebEventDeliverEndTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 53, "WebEventDeliverEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageTraceWarnEventTraceData> AspNetReqTraceContextWarning
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageTraceWarnEventTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 59, "TraceContextWarning", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetPageTraceWriteEventTraceData> AspNetReqTraceContextWrite
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetPageTraceWriteEventTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 60, "TraceContextWrite", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetModuleDiagCriticalEventTraceData> AspNetReqDiagnosticTraceCritical
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetModuleDiagCriticalEventTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 61, "DiagnosticTraceCritical", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetModuleDiagErrorEventTraceData> AspNetReqDiagnosticTraceError
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetModuleDiagErrorEventTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 62, "DiagnosticTraceError", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetModuleDiagWarningEventTraceData> AspNetReqDiagnosticTraceWarning
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetModuleDiagWarningEventTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 63, "DiagnosticTraceWarning", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetModuleDiagInfoEventTraceData> AspNetReqDiagnosticTraceInfo
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetModuleDiagInfoEventTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 64, "DiagnosticTraceInfo", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetModuleDiagVerboseEventTraceData> AspNetReqDiagnosticTraceVerbose
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetModuleDiagVerboseEventTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 65, "DiagnosticTraceVerbose", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetModuleDiagStartEventTraceData> AspNetReqDiagnosticTraceStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetModuleDiagStartEventTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 66, "DiagnosticTraceStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetModuleDiagStopEventTraceData> AspNetReqDiagnosticTraceStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetModuleDiagStopEventTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 67, "DiagnosticTraceStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetModuleDiagSuspendEventTraceData> AspNetReqDiagnosticTraceSuspend
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetModuleDiagSuspendEventTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 68, "DiagnosticTraceSuspend", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetModuleDiagResumeEventTraceData> AspNetReqDiagnosticTraceResume
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetModuleDiagResumeEventTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 69, "DiagnosticTraceResume", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<AspNetModuleDiagTransferEventTraceData> AspNetReqDiagnosticTraceTransfer
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AspNetModuleDiagTransferEventTraceData(value, 0xFFFF, 0, "AspNetReq", AspNetReqTaskGuid, 70, "DiagnosticTraceTransfer", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }

       #region Event ID Definitions
        public const TraceEventID AspNetReqStartEventID = (TraceEventID) 10000;
        public const TraceEventID AspNetReqEndEventID = (TraceEventID) 10001;
        public const TraceEventID AspNetReqRequestQueuedEventID = (TraceEventID) 10002;
        public const TraceEventID AspNetReqRequestDequeuedEventID = (TraceEventID) 10003;
        public const TraceEventID AspNetReqGetAppDomainEnterEventID = (TraceEventID) 10004;
        public const TraceEventID AspNetReqGetAppDomainLeaveEventID = (TraceEventID) 10005;
        public const TraceEventID AspNetReqAppDomainEnterEventID = (TraceEventID) 10006;
        public const TraceEventID AspNetReqStartHandlerEventID = (TraceEventID) 10007;
        public const TraceEventID AspNetReqEndHandlerEventID = (TraceEventID) 10008;
        public const TraceEventID AspNetReqPipelineModuleEnterEventID = (TraceEventID) 10009;
        public const TraceEventID AspNetReqPipelineModuleLeaveEventID = (TraceEventID) 10010;
        public const TraceEventID AspNetReqMapHandlerEnterEventID = (TraceEventID) 10011;
        public const TraceEventID AspNetReqMapHandlerLeaveEventID = (TraceEventID) 10012;
        public const TraceEventID AspNetReqParseEnterEventID = (TraceEventID) 10013;
        public const TraceEventID AspNetReqParseLeaveEventID = (TraceEventID) 10014;
        public const TraceEventID AspNetReqCompileEnterEventID = (TraceEventID) 10015;
        public const TraceEventID AspNetReqCompileLeaveEventID = (TraceEventID) 10016;
        public const TraceEventID AspNetReqHttpHandlerEnterEventID = (TraceEventID) 10017;
        public const TraceEventID AspNetReqHttpHandlerLeaveEventID = (TraceEventID) 10018;
        public const TraceEventID AspNetReqSessionStatePartitionStartEventID = (TraceEventID) 10019;
        public const TraceEventID AspNetReqSessionStatePartitionEndEventID = (TraceEventID) 10020;
        public const TraceEventID AspNetReqPagePreInitEnterEventID = (TraceEventID) 10021;
        public const TraceEventID AspNetReqPagePreInitLeaveEventID = (TraceEventID) 10022;
        public const TraceEventID AspNetReqPageInitEnterEventID = (TraceEventID) 10023;
        public const TraceEventID AspNetReqPageInitLeaveEventID = (TraceEventID) 10024;
        public const TraceEventID AspNetReqPageLoadViewstateEnterEventID = (TraceEventID) 10025;
        public const TraceEventID AspNetReqPageLoadViewstateLeaveEventID = (TraceEventID) 10026;
        public const TraceEventID AspNetReqPageLoadPostDataEnterEventID = (TraceEventID) 10027;
        public const TraceEventID AspNetReqPageLoadPostDataLeaveEventID = (TraceEventID) 10028;
        public const TraceEventID AspNetReqPageLoadEnterEventID = (TraceEventID) 10029;
        public const TraceEventID AspNetReqPageLoadLeaveEventID = (TraceEventID) 10030;
        public const TraceEventID AspNetReqPagePostDataChangedEnterEventID = (TraceEventID) 10031;
        public const TraceEventID AspNetReqPagePostDataChangedLeaveEventID = (TraceEventID) 10032;
        public const TraceEventID AspNetReqPageRaisePostbackEnterEventID = (TraceEventID) 10033;
        public const TraceEventID AspNetReqPageRaisePostbackLeaveEventID = (TraceEventID) 10034;
        public const TraceEventID AspNetReqPagePreRenderEnterEventID = (TraceEventID) 10035;
        public const TraceEventID AspNetReqPagePreRenderLeaveEventID = (TraceEventID) 10036;
        public const TraceEventID AspNetReqPageSaveViewstateEnterEventID = (TraceEventID) 10037;
        public const TraceEventID AspNetReqPageSaveViewstateLeaveEventID = (TraceEventID) 10038;
        public const TraceEventID AspNetReqPageRenderEnterEventID = (TraceEventID) 10039;
        public const TraceEventID AspNetReqPageRenderLeaveEventID = (TraceEventID) 10040;
        public const TraceEventID AspNetReqSessionDataBeginEventID = (TraceEventID) 10041;
        public const TraceEventID AspNetReqSessionDataEndEventID = (TraceEventID) 10042;
        public const TraceEventID AspNetReqProfileBeginEventID = (TraceEventID) 10043;
        public const TraceEventID AspNetReqProfileEndEventID = (TraceEventID) 10044;
        public const TraceEventID AspNetReqRoleManagerIsUserInRoleEventID = (TraceEventID) 10045;
        public const TraceEventID AspNetReqRoleManagerGetUserRolesEventID = (TraceEventID) 10046;
        public const TraceEventID AspNetReqRoleManagerBeginEventID = (TraceEventID) 10047;
        public const TraceEventID AspNetReqRoleManagerEndEventID = (TraceEventID) 10048;
        public const TraceEventID AspNetReqWebEventRaiseStartEventID = (TraceEventID) 10049;
        public const TraceEventID AspNetReqWebEventRaiseEndEventID = (TraceEventID) 10050;
        public const TraceEventID AspNetReqWebEventDeliverStartEventID = (TraceEventID) 10051;
        public const TraceEventID AspNetReqWebEventDeliverEndEventID = (TraceEventID) 10052;
        public const TraceEventID AspNetReqTraceContextWarningEventID = (TraceEventID) 10053;
        public const TraceEventID AspNetReqTraceContextWriteEventID = (TraceEventID) 10054;
        public const TraceEventID AspNetReqDiagnosticTraceCriticalEventID = (TraceEventID) 10055;
        public const TraceEventID AspNetReqDiagnosticTraceErrorEventID = (TraceEventID) 10056;
        public const TraceEventID AspNetReqDiagnosticTraceWarningEventID = (TraceEventID) 10057;
        public const TraceEventID AspNetReqDiagnosticTraceInfoEventID = (TraceEventID) 10058;
        public const TraceEventID AspNetReqDiagnosticTraceVerboseEventID = (TraceEventID) 10059;
        public const TraceEventID AspNetReqDiagnosticTraceStartEventID = (TraceEventID) 10060;
        public const TraceEventID AspNetReqDiagnosticTraceStopEventID = (TraceEventID) 10061;
        public const TraceEventID AspNetReqDiagnosticTraceSuspendEventID = (TraceEventID) 10062;
        public const TraceEventID AspNetReqDiagnosticTraceResumeEventID = (TraceEventID) 10063;
        public const TraceEventID AspNetReqDiagnosticTraceTransferEventID = (TraceEventID) 10064;
       #endregion

    #region private
        private static Guid AspNetReqTaskGuid = new Guid(unchecked((int) 0x06a01367), unchecked((short) 0x79d3), unchecked((short) 0x4594), 0x8e, 0xb3, 0xc7, 0x21, 0x60, 0x3c, 0x46, 0x79);
    #endregion
    }

    public sealed class AspNetStartTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public string Method { get { return GetUTF8StringAt(24); } }
        public string Path { get { return GetUTF8StringAt(SkipUTF8String(24)); } }
        public string QueryString { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(24))); } }

        #region Private
        internal AspNetStartTraceData(Action<AspNetStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(24)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(24)))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Method", Method);
             sb.XmlAttrib("Path", Path);
             sb.XmlAttrib("QueryString", QueryString);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "Method", "Path", "QueryString"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return Method;
                case 3:
                    return Path;
                case 4:
                    return QueryString;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetStartTraceData> Action;
        #endregion
    }
    public sealed class AspNetStopTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetStopTraceData(Action<AspNetStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetStopTraceData> Action;
        #endregion
    }
    public sealed class AspNetRequestQueuedTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetRequestQueuedTraceData(Action<AspNetRequestQueuedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetRequestQueuedTraceData> Action;
        #endregion
    }
    public sealed class AspNetRequestDequeuedTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetRequestDequeuedTraceData(Action<AspNetRequestDequeuedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetRequestDequeuedTraceData> Action;
        #endregion
    }
    public sealed class AspNetGetAppDomainEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetGetAppDomainEnterTraceData(Action<AspNetGetAppDomainEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetGetAppDomainEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetGetAppDomainLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetGetAppDomainLeaveTraceData(Action<AspNetGetAppDomainLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetGetAppDomainLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetAppDomainEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public string DomainId { get { return GetUnicodeStringAt(24); } }

        #region Private
        internal AspNetAppDomainEnterTraceData(Action<AspNetAppDomainEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(24)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(24)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("DomainId", DomainId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "DomainId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return DomainId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetAppDomainEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetStartHandlerTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public string HandlerName { get { return GetUnicodeStringAt(24); } }
        public new string EventName { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }

        #region Private
        internal AspNetStartHandlerTraceData(Action<AspNetStartHandlerTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(24))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(24))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("HandlerName", HandlerName);
             sb.XmlAttrib("EventName", EventName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "HandlerName", "EventName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return HandlerName;
                case 3:
                    return EventName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetStartHandlerTraceData> Action;
        #endregion
    }
    public sealed class AspNetEndHandlerTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetEndHandlerTraceData(Action<AspNetEndHandlerTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetEndHandlerTraceData> Action;
        #endregion
    }
    public sealed class AspNetPipelineModuleEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public string ModuleName { get { return GetUnicodeStringAt(24); } }

        #region Private
        internal AspNetPipelineModuleEnterTraceData(Action<AspNetPipelineModuleEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(24)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(24)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("ModuleName", ModuleName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "ModuleName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return ModuleName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPipelineModuleEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetPipelineModuleLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public string ModuleName { get { return GetUnicodeStringAt(24); } }

        #region Private
        internal AspNetPipelineModuleLeaveTraceData(Action<AspNetPipelineModuleLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(24)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(24)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("ModuleName", ModuleName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "ModuleName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return ModuleName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPipelineModuleLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetMapHandlerEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetMapHandlerEnterTraceData(Action<AspNetMapHandlerEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetMapHandlerEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetMapHandlerLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetMapHandlerLeaveTraceData(Action<AspNetMapHandlerLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetMapHandlerLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetParseEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetParseEnterTraceData(Action<AspNetParseEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetParseEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetParseLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetParseLeaveTraceData(Action<AspNetParseLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetParseLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetCompileEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetCompileEnterTraceData(Action<AspNetCompileEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetCompileEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetCompileLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public string Files { get { return GetUnicodeStringAt(24); } }
        public string Status { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }

        #region Private
        internal AspNetCompileLeaveTraceData(Action<AspNetCompileLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(24))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(24))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Files", Files);
             sb.XmlAttrib("Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "Files", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return Files;
                case 3:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetCompileLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetHttpHandlerEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetHttpHandlerEnterTraceData(Action<AspNetHttpHandlerEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetHttpHandlerEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetHttpHandlerLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetHttpHandlerLeaveTraceData(Action<AspNetHttpHandlerLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetHttpHandlerLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetSessionStatePartitionStartTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public string ResolverType { get { return GetUnicodeStringAt(24); } }
        public string SessionId { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }

        #region Private
        internal AspNetSessionStatePartitionStartTraceData(Action<AspNetSessionStatePartitionStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(24))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(24))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("ResolverType", ResolverType);
             sb.XmlAttrib("SessionId", SessionId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "ResolverType", "SessionId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return ResolverType;
                case 3:
                    return SessionId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetSessionStatePartitionStartTraceData> Action;
        #endregion
    }
    public sealed class AspNetSessionStatePartitionEndTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public string ResolverResult { get { return GetUnicodeStringAt(24); } }

        #region Private
        internal AspNetSessionStatePartitionEndTraceData(Action<AspNetSessionStatePartitionEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(24)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(24)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("ResolverResult", ResolverResult);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "ResolverResult"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return ResolverResult;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetSessionStatePartitionEndTraceData> Action;
        #endregion
    }
    public sealed class AspNetPagePreInitEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPagePreInitEnterTraceData(Action<AspNetPagePreInitEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPagePreInitEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetPagePreInitLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPagePreInitLeaveTraceData(Action<AspNetPagePreInitLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPagePreInitLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageInitEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageInitEnterTraceData(Action<AspNetPageInitEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageInitEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageInitLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageInitLeaveTraceData(Action<AspNetPageInitLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageInitLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageLoadViewstateEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageLoadViewstateEnterTraceData(Action<AspNetPageLoadViewstateEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageLoadViewstateEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageLoadViewstateLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageLoadViewstateLeaveTraceData(Action<AspNetPageLoadViewstateLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageLoadViewstateLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageLoadPostDataEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageLoadPostDataEnterTraceData(Action<AspNetPageLoadPostDataEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageLoadPostDataEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageLoadPostDataLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageLoadPostDataLeaveTraceData(Action<AspNetPageLoadPostDataLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageLoadPostDataLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageLoadEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageLoadEnterTraceData(Action<AspNetPageLoadEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageLoadEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageLoadLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageLoadLeaveTraceData(Action<AspNetPageLoadLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageLoadLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetPagePostDataChangedEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPagePostDataChangedEnterTraceData(Action<AspNetPagePostDataChangedEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPagePostDataChangedEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetPagePostDataChangedLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPagePostDataChangedLeaveTraceData(Action<AspNetPagePostDataChangedLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPagePostDataChangedLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageRaisePostbackEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageRaisePostbackEnterTraceData(Action<AspNetPageRaisePostbackEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageRaisePostbackEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageRaisePostbackLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageRaisePostbackLeaveTraceData(Action<AspNetPageRaisePostbackLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageRaisePostbackLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetPagePreRenderEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPagePreRenderEnterTraceData(Action<AspNetPagePreRenderEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPagePreRenderEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetPagePreRenderLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPagePreRenderLeaveTraceData(Action<AspNetPagePreRenderLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPagePreRenderLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageSaveViewstateEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageSaveViewstateEnterTraceData(Action<AspNetPageSaveViewstateEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageSaveViewstateEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageSaveViewstateLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageSaveViewstateLeaveTraceData(Action<AspNetPageSaveViewstateLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageSaveViewstateLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageRenderEnterTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageRenderEnterTraceData(Action<AspNetPageRenderEnterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageRenderEnterTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageRenderLeaveTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetPageRenderLeaveTraceData(Action<AspNetPageRenderLeaveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageRenderLeaveTraceData> Action;
        #endregion
    }
    public sealed class AspNetAcquireSessionBeginTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetAcquireSessionBeginTraceData(Action<AspNetAcquireSessionBeginTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetAcquireSessionBeginTraceData> Action;
        #endregion
    }
    public sealed class AspNetAcquireSessionEndTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetAcquireSessionEndTraceData(Action<AspNetAcquireSessionEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetAcquireSessionEndTraceData> Action;
        #endregion
    }
    public sealed class AspNetProfileBeginTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetProfileBeginTraceData(Action<AspNetProfileBeginTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetProfileBeginTraceData> Action;
        #endregion
    }
    public sealed class AspNetProfileEndTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public string User { get { return GetUnicodeStringAt(24); } }

        #region Private
        internal AspNetProfileEndTraceData(Action<AspNetProfileEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(24)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(24)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("User", User);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "User"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return User;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetProfileEndTraceData> Action;
        #endregion
    }
    public sealed class AspNetRoleManagerIsUserInRoleTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public string Provider { get { return GetUnicodeStringAt(24); } }
        public string User { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }
        public string Role { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(24))); } }
        public string Status { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))); } }

        #region Private
        internal AspNetRoleManagerIsUserInRoleTraceData(Action<AspNetRoleManagerIsUserInRoleTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24))))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24))))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Provider", Provider);
             sb.XmlAttrib("User", User);
             sb.XmlAttrib("Role", Role);
             sb.XmlAttrib("Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "Provider", "User", "Role", "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return Provider;
                case 3:
                    return User;
                case 4:
                    return Role;
                case 5:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetRoleManagerIsUserInRoleTraceData> Action;
        #endregion
    }
    public sealed class AspNetRoleManagerGetUserRolesTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public string Provider { get { return GetUnicodeStringAt(24); } }
        public string User { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }
        public string Roles { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(24))); } }

        #region Private
        internal AspNetRoleManagerGetUserRolesTraceData(Action<AspNetRoleManagerGetUserRolesTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Provider", Provider);
             sb.XmlAttrib("User", User);
             sb.XmlAttrib("Roles", Roles);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "Provider", "User", "Roles"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return Provider;
                case 3:
                    return User;
                case 4:
                    return Roles;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetRoleManagerGetUserRolesTraceData> Action;
        #endregion
    }
    public sealed class AspNetRoleManagerBeginTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetRoleManagerBeginTraceData(Action<AspNetRoleManagerBeginTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetRoleManagerBeginTraceData> Action;
        #endregion
    }
    public sealed class AspNetRoleManagerEndTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public string Provider { get { return GetUnicodeStringAt(24); } }
        public string User { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }

        #region Private
        internal AspNetRoleManagerEndTraceData(Action<AspNetRoleManagerEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(24))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(24))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Provider", Provider);
             sb.XmlAttrib("User", User);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "Provider", "User"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return Provider;
                case 3:
                    return User;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetRoleManagerEndTraceData> Action;
        #endregion
    }
    public sealed class AspNetWebEventRaiseStartTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public string EventClassName { get { return GetUnicodeStringAt(24); } }
        public string EventCode { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }
        public string EventDetailCode { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(24))); } }

        #region Private
        internal AspNetWebEventRaiseStartTraceData(Action<AspNetWebEventRaiseStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("EventClassName", EventClassName);
             sb.XmlAttrib("EventCode", EventCode);
             sb.XmlAttrib("EventDetailCode", EventDetailCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "EventClassName", "EventCode", "EventDetailCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return EventClassName;
                case 3:
                    return EventCode;
                case 4:
                    return EventDetailCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetWebEventRaiseStartTraceData> Action;
        #endregion
    }
    public sealed class AspNetWebEventRaiseEndTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetWebEventRaiseEndTraceData(Action<AspNetWebEventRaiseEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetWebEventRaiseEndTraceData> Action;
        #endregion
    }
    public sealed class AspNetWebEventDeliverStartTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }
        public new string ProviderName { get { return GetUnicodeStringAt(24); } }
        public string RuleName { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }
        public string EventGroupName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(24))); } }

        #region Private
        internal AspNetWebEventDeliverStartTraceData(Action<AspNetWebEventDeliverStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("ProviderName", ProviderName);
             sb.XmlAttrib("RuleName", RuleName);
             sb.XmlAttrib("EventGroupName", EventGroupName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId", "ProviderName", "RuleName", "EventGroupName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                case 2:
                    return ProviderName;
                case 3:
                    return RuleName;
                case 4:
                    return EventGroupName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetWebEventDeliverStartTraceData> Action;
        #endregion
    }
    public sealed class AspNetWebEventDeliverEndTraceData : TraceEvent
    {
        public long ConnID { get { return GetInt64At(0); } }
        public Guid ContextId { get { return GetGuidAt(8); } }

        #region Private
        internal AspNetWebEventDeliverEndTraceData(Action<AspNetWebEventDeliverEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ConnID", ConnID);
             sb.XmlAttrib("ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ConnID", "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ConnID;
                case 1:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetWebEventDeliverEndTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageTraceWarnEventTraceData : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Uri { get { return GetUnicodeStringAt(16); } }
        public string TraceWarningMsg { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal AspNetPageTraceWarnEventTraceData(Action<AspNetPageTraceWarnEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Uri", Uri);
             sb.XmlAttrib("TraceWarningMsg", TraceWarningMsg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Uri", "TraceWarningMsg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Uri;
                case 2:
                    return TraceWarningMsg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageTraceWarnEventTraceData> Action;
        #endregion
    }
    public sealed class AspNetPageTraceWriteEventTraceData : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Uri { get { return GetUnicodeStringAt(16); } }
        public string TraceWriteMsg { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal AspNetPageTraceWriteEventTraceData(Action<AspNetPageTraceWriteEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Uri", Uri);
             sb.XmlAttrib("TraceWriteMsg", TraceWriteMsg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Uri", "TraceWriteMsg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Uri;
                case 2:
                    return TraceWriteMsg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetPageTraceWriteEventTraceData> Action;
        #endregion
    }
    public sealed class AspNetModuleDiagCriticalEventTraceData : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Uri { get { return GetUnicodeStringAt(16); } }
        public string TraceWriteMsg { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal AspNetModuleDiagCriticalEventTraceData(Action<AspNetModuleDiagCriticalEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Uri", Uri);
             sb.XmlAttrib("TraceWriteMsg", TraceWriteMsg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Uri", "TraceWriteMsg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Uri;
                case 2:
                    return TraceWriteMsg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetModuleDiagCriticalEventTraceData> Action;
        #endregion
    }
    public sealed class AspNetModuleDiagErrorEventTraceData : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Uri { get { return GetUnicodeStringAt(16); } }
        public string TraceWriteMsg { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal AspNetModuleDiagErrorEventTraceData(Action<AspNetModuleDiagErrorEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Uri", Uri);
             sb.XmlAttrib("TraceWriteMsg", TraceWriteMsg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Uri", "TraceWriteMsg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Uri;
                case 2:
                    return TraceWriteMsg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetModuleDiagErrorEventTraceData> Action;
        #endregion
    }
    public sealed class AspNetModuleDiagWarningEventTraceData : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Uri { get { return GetUnicodeStringAt(16); } }
        public string TraceWriteMsg { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal AspNetModuleDiagWarningEventTraceData(Action<AspNetModuleDiagWarningEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Uri", Uri);
             sb.XmlAttrib("TraceWriteMsg", TraceWriteMsg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Uri", "TraceWriteMsg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Uri;
                case 2:
                    return TraceWriteMsg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetModuleDiagWarningEventTraceData> Action;
        #endregion
    }
    public sealed class AspNetModuleDiagInfoEventTraceData : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Uri { get { return GetUnicodeStringAt(16); } }
        public string TraceWriteMsg { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal AspNetModuleDiagInfoEventTraceData(Action<AspNetModuleDiagInfoEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Uri", Uri);
             sb.XmlAttrib("TraceWriteMsg", TraceWriteMsg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Uri", "TraceWriteMsg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Uri;
                case 2:
                    return TraceWriteMsg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetModuleDiagInfoEventTraceData> Action;
        #endregion
    }
    public sealed class AspNetModuleDiagVerboseEventTraceData : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Uri { get { return GetUnicodeStringAt(16); } }
        public string TraceWriteMsg { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal AspNetModuleDiagVerboseEventTraceData(Action<AspNetModuleDiagVerboseEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Uri", Uri);
             sb.XmlAttrib("TraceWriteMsg", TraceWriteMsg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Uri", "TraceWriteMsg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Uri;
                case 2:
                    return TraceWriteMsg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetModuleDiagVerboseEventTraceData> Action;
        #endregion
    }
    public sealed class AspNetModuleDiagStartEventTraceData : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Uri { get { return GetUnicodeStringAt(16); } }
        public string TraceWriteMsg { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal AspNetModuleDiagStartEventTraceData(Action<AspNetModuleDiagStartEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Uri", Uri);
             sb.XmlAttrib("TraceWriteMsg", TraceWriteMsg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Uri", "TraceWriteMsg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Uri;
                case 2:
                    return TraceWriteMsg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetModuleDiagStartEventTraceData> Action;
        #endregion
    }
    public sealed class AspNetModuleDiagStopEventTraceData : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Uri { get { return GetUnicodeStringAt(16); } }
        public string TraceWriteMsg { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal AspNetModuleDiagStopEventTraceData(Action<AspNetModuleDiagStopEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Uri", Uri);
             sb.XmlAttrib("TraceWriteMsg", TraceWriteMsg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Uri", "TraceWriteMsg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Uri;
                case 2:
                    return TraceWriteMsg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetModuleDiagStopEventTraceData> Action;
        #endregion
    }
    public sealed class AspNetModuleDiagSuspendEventTraceData : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Uri { get { return GetUnicodeStringAt(16); } }
        public string TraceWriteMsg { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal AspNetModuleDiagSuspendEventTraceData(Action<AspNetModuleDiagSuspendEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Uri", Uri);
             sb.XmlAttrib("TraceWriteMsg", TraceWriteMsg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Uri", "TraceWriteMsg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Uri;
                case 2:
                    return TraceWriteMsg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetModuleDiagSuspendEventTraceData> Action;
        #endregion
    }
    public sealed class AspNetModuleDiagResumeEventTraceData : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Uri { get { return GetUnicodeStringAt(16); } }
        public string TraceWriteMsg { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal AspNetModuleDiagResumeEventTraceData(Action<AspNetModuleDiagResumeEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Uri", Uri);
             sb.XmlAttrib("TraceWriteMsg", TraceWriteMsg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Uri", "TraceWriteMsg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Uri;
                case 2:
                    return TraceWriteMsg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetModuleDiagResumeEventTraceData> Action;
        #endregion
    }
    public sealed class AspNetModuleDiagTransferEventTraceData : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Uri { get { return GetUnicodeStringAt(16); } }
        public string TraceWriteMsg { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal AspNetModuleDiagTransferEventTraceData(Action<AspNetModuleDiagTransferEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ContextId", ContextId);
             sb.XmlAttrib("Uri", Uri);
             sb.XmlAttrib("TraceWriteMsg", TraceWriteMsg);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Uri", "TraceWriteMsg"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Uri;
                case 2:
                    return TraceWriteMsg;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspNetModuleDiagTransferEventTraceData> Action;
        #endregion
    }

}
